/**
 * @fileoverview gRPC-Web generated client stub for battleship
 * @enhanceable
 * @public
 */

// Code generated by protoc-gen-grpc-web. DO NOT EDIT.
// versions:
// 	protoc-gen-grpc-web v1.4.2
// 	protoc              v3.21.12
// source: battleship.proto


/* eslint-disable */
// @ts-nocheck



const grpc = {};
grpc.web = require('grpc-web');

const proto = {};
proto.battleship = require('./battleship_pb.js');

/**
 * @param {string} hostname
 * @param {?Object} credentials
 * @param {?grpc.web.ClientOptions} options
 * @constructor
 * @struct
 * @final
 */
proto.battleship.BattleshipClient =
    function(hostname, credentials, options) {
  if (!options) options = {};
  options.format = 'text';

  /**
   * @private @const {!grpc.web.GrpcWebClientBase} The client
   */
  this.client_ = new grpc.web.GrpcWebClientBase(options);

  /**
   * @private @const {string} The hostname
   */
  this.hostname_ = hostname.replace(/\/+$/, '');

};


/**
 * @param {string} hostname
 * @param {?Object} credentials
 * @param {?grpc.web.ClientOptions} options
 * @constructor
 * @struct
 * @final
 */
proto.battleship.BattleshipPromiseClient =
    function(hostname, credentials, options) {
  if (!options) options = {};
  options.format = 'text';

  /**
   * @private @const {!grpc.web.GrpcWebClientBase} The client
   */
  this.client_ = new grpc.web.GrpcWebClientBase(options);

  /**
   * @private @const {string} The hostname
   */
  this.hostname_ = hostname.replace(/\/+$/, '');

};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.battleship.NewGameRequest,
 *   !proto.battleship.NewGameResponse>}
 */
const methodDescriptor_Battleship_NewGame = new grpc.web.MethodDescriptor(
  '/battleship.Battleship/NewGame',
  grpc.web.MethodType.UNARY,
  proto.battleship.NewGameRequest,
  proto.battleship.NewGameResponse,
  /**
   * @param {!proto.battleship.NewGameRequest} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.battleship.NewGameResponse.deserializeBinary
);


/**
 * @param {!proto.battleship.NewGameRequest} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.battleship.NewGameResponse)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.battleship.NewGameResponse>|undefined}
 *     The XHR Node Readable Stream
 */
proto.battleship.BattleshipClient.prototype.newGame =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/battleship.Battleship/NewGame',
      request,
      metadata || {},
      methodDescriptor_Battleship_NewGame,
      callback);
};


/**
 * @param {!proto.battleship.NewGameRequest} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.battleship.NewGameResponse>}
 *     Promise that resolves to the response
 */
proto.battleship.BattleshipPromiseClient.prototype.newGame =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/battleship.Battleship/NewGame',
      request,
      metadata || {},
      methodDescriptor_Battleship_NewGame);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.battleship.JoinGameRequest,
 *   !proto.battleship.JoinGameResponse>}
 */
const methodDescriptor_Battleship_JoinGame = new grpc.web.MethodDescriptor(
  '/battleship.Battleship/JoinGame',
  grpc.web.MethodType.UNARY,
  proto.battleship.JoinGameRequest,
  proto.battleship.JoinGameResponse,
  /**
   * @param {!proto.battleship.JoinGameRequest} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.battleship.JoinGameResponse.deserializeBinary
);


/**
 * @param {!proto.battleship.JoinGameRequest} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.battleship.JoinGameResponse)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.battleship.JoinGameResponse>|undefined}
 *     The XHR Node Readable Stream
 */
proto.battleship.BattleshipClient.prototype.joinGame =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/battleship.Battleship/JoinGame',
      request,
      metadata || {},
      methodDescriptor_Battleship_JoinGame,
      callback);
};


/**
 * @param {!proto.battleship.JoinGameRequest} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.battleship.JoinGameResponse>}
 *     Promise that resolves to the response
 */
proto.battleship.BattleshipPromiseClient.prototype.joinGame =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/battleship.Battleship/JoinGame',
      request,
      metadata || {},
      methodDescriptor_Battleship_JoinGame);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.battleship.PlaceShipRequest,
 *   !proto.battleship.PlaceShipResponse>}
 */
const methodDescriptor_Battleship_PlaceShip = new grpc.web.MethodDescriptor(
  '/battleship.Battleship/PlaceShip',
  grpc.web.MethodType.UNARY,
  proto.battleship.PlaceShipRequest,
  proto.battleship.PlaceShipResponse,
  /**
   * @param {!proto.battleship.PlaceShipRequest} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.battleship.PlaceShipResponse.deserializeBinary
);


/**
 * @param {!proto.battleship.PlaceShipRequest} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.battleship.PlaceShipResponse)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.battleship.PlaceShipResponse>|undefined}
 *     The XHR Node Readable Stream
 */
proto.battleship.BattleshipClient.prototype.placeShip =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/battleship.Battleship/PlaceShip',
      request,
      metadata || {},
      methodDescriptor_Battleship_PlaceShip,
      callback);
};


/**
 * @param {!proto.battleship.PlaceShipRequest} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.battleship.PlaceShipResponse>}
 *     Promise that resolves to the response
 */
proto.battleship.BattleshipPromiseClient.prototype.placeShip =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/battleship.Battleship/PlaceShip',
      request,
      metadata || {},
      methodDescriptor_Battleship_PlaceShip);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.battleship.FireRequest,
 *   !proto.battleship.FireResponse>}
 */
const methodDescriptor_Battleship_Fire = new grpc.web.MethodDescriptor(
  '/battleship.Battleship/Fire',
  grpc.web.MethodType.UNARY,
  proto.battleship.FireRequest,
  proto.battleship.FireResponse,
  /**
   * @param {!proto.battleship.FireRequest} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.battleship.FireResponse.deserializeBinary
);


/**
 * @param {!proto.battleship.FireRequest} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.battleship.FireResponse)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.battleship.FireResponse>|undefined}
 *     The XHR Node Readable Stream
 */
proto.battleship.BattleshipClient.prototype.fire =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/battleship.Battleship/Fire',
      request,
      metadata || {},
      methodDescriptor_Battleship_Fire,
      callback);
};


/**
 * @param {!proto.battleship.FireRequest} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.battleship.FireResponse>}
 *     Promise that resolves to the response
 */
proto.battleship.BattleshipPromiseClient.prototype.fire =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/battleship.Battleship/Fire',
      request,
      metadata || {},
      methodDescriptor_Battleship_Fire);
};


module.exports = proto.battleship;

